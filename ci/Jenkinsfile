#!/usr/bin/env groovy

def gitShortCommit=''
def date=''
def image_tag=''
def app_name='providers'
def image_name_pkg='provider-aws'
def image_name_ctl='provider-aws-controller'
def devops_cd_git="github.com/zilliztech/vdc-deploy.git"
def github='https://github.com/haorenfsa/provider-aws.git'
pipeline {
   options{
    disableConcurrentBuilds(abortPrevious: true)
    skipDefaultCheckout()
   }
   agent {
        kubernetes {
            label 'providers-sit-cicd'
            inheritFrom 'default'
            defaultContainer 'main'
            yamlFile 'ci/pod/ci.yaml'
            customWorkspace '/home/jenkins/agent/workspace'
        }
   }
    parameters {
        gitParameter branchFilter: 'origin/(.*)', defaultValue: 'main', name: 'BRANCH', type: 'PT_BRANCH'
    }
   environment{
      DOCKER_IMAGE_PKG="harbor-ap1.zilliz.cc/infra/${image_name_pkg}"
      DOCKER_IMAGE_CTL="harbor-ap1.zilliz.cc/infra/${image_name_ctl}"
      GITHUB_TOKEN_ID="github-token"
      TEST_ENVIRONMENT="sit"
      ARGOCD_TOKEN_ID="argocd-token"
   }
    stages {
        stage('Checkout'){
            steps{
                git  credentialsId: 'zilliz-ci',  branch: "${params.BRANCH}", url: "${github}"
                script {
                    sh 'printenv'
                    date = sh(returnStdout: true, script: 'date +%Y%m%d').trim()
                    gitShortCommit = sh(returnStdout: true, script: 'git rev-parse --short HEAD').trim()
                    image_tag="${params.BRANCH}-${date}-${gitShortCommit}"
                }
            }
        }
        stage('Build & Publish Image') {
            steps{
                container(name: 'kaniko',shell: '/busybox/sh') {
                  script { 
                    sh 'ls -lah '
                    // Build & Publish Docker Image use kaniko
                    withCredentials([usernamePassword(credentialsId: "${env.GITHUB_TOKEN_ID}", usernameVariable: 'GITHUB_USER', passwordVariable: 'GITHUB_TOKEN')]){
                    sh """
                    executor \
                    --context="`pwd`" \
                    --registry-mirror="nexus-nexus-repository-manager-docker-5000.nexus:5000"\
                    --insecure-registry="nexus-nexus-repository-manager-docker-5000.nexus:5000" \
                    --build-arg=GITHUB_USER=${GITHUB_USER} \
                    --build-arg=GITHUB_TOKEN=${GITHUB_TOKEN} \
                    --build-arg=PROVIDER_CTL_VERSION=${image_tag} \
                    --dockerfile="ci/docker/pkg.Dockerfile" \
                    --destination=${DOCKER_IMAGE_PKG}:${image_tag}

                    executor \
                    --context="`pwd`" \
                    --registry-mirror="nexus-nexus-repository-manager-docker-5000.nexus:5000"\
                    --insecure-registry="nexus-nexus-repository-manager-docker-5000.nexus:5000" \
                    --build-arg=GITHUB_USER=${GITHUB_USER} \
                    --build-arg=GITHUB_TOKEN=${GITHUB_TOKEN} \
                    --dockerfile="ci/docker/ctl.Dockerfile" \
                    --destination=${DOCKER_IMAGE_CTL}:${image_tag}
                    """
                    }
                  }
                }
            }
        }

        stage('Deploy'){
            steps{
                script{
                    withCredentials([usernamePassword(credentialsId: "${env.GITHUB_TOKEN_ID}", usernameVariable: 'GITHUB_USER', passwordVariable: 'GITHUB_TOKEN')]){
                    sh """
                        git remote set-url origin https://${GITHUB_USER}:${GITHUB_TOKEN}@${devops_cd_git}
                        git config --global user.name "${GITHUB_USER}"
                        git config --global user.email "test@zilliz.com"
                        git clone https://${GITHUB_USER}:${GITHUB_TOKEN}@${devops_cd_git} /opt/devops-cd
                        cd /opt/devops-cd
                        git pull
                        cd /opt/devops-cd/${app_name}/overlays/${TEST_ENVIRONMENT}
                        kustomize edit set image ${image_name_pkg}=${DOCKER_IMAGE_PKG}:${image_tag}
                        git commit -am "[automated]Update ${app_name} Docker image for ${TEST_ENVIRONMENT} test environment" --allow-empty
                        git push origin master
                    """
                    }
                    withCredentials([usernamePassword(credentialsId: "${env.ARGOCD_TOKEN_ID}", usernameVariable: 'ARGOCD_SERVER', passwordVariable: 'ARGOCD_AUTH_TOKEN')]){
                        sh """
                         argocd app sync sit-${app_name} --retry-limit 3 --prune --grpc-web
                        """
                    }

                }
            }
        }
    }
    post{
        always {
            container('jnlp') {
                    script {
                        emailext subject: '$DEFAULT_SUBJECT',
                        body: '$DEFAULT_CONTENT',
                        recipientProviders: [developers(), culprits()],
                        replyTo: '$DEFAULT_REPLYTO',
                        to: "jincheng.huang@zilliz.com,shaoyue.chen@zilliz.com"
                    }
            }
        }
    } 
}
